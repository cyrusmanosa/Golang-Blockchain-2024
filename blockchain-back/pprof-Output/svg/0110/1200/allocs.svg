<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 12.2.1 (20241206.2353)
 -->
<!-- Title: blockchain&#45;back Pages: 1 -->
<svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<script type="text/ecmascript"><![CDATA[/** 
 *  SVGPan library 1.2.2
 * ======================
 *
 * Given an unique existing element with id "viewport" (or when missing, the 
 * first g-element), including the the library into any SVG adds the following 
 * capabilities:
 *
 *  - Mouse panning
 *  - Mouse zooming (using the wheel)
 *  - Object dragging
 *
 * You can configure the behaviour of the pan/zoom/drag with the variables
 * listed in the CONFIGURATION section of this file.
 *
 * This code is licensed under the following BSD license:
 *
 * Copyright 2009-2019 Andrea Leofreddi <a.leofreddi@vleo.net>. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. Neither the name of the copyright holder nor the names of its 
 *       contributors may be used to endorse or promote products derived from 
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS 
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Andrea Leofreddi.
 */

"use strict";

/// CONFIGURATION 
/// ====>

var enablePan = 1; // 1 or 0: enable or disable panning (default enabled)
var enableZoom = 1; // 1 or 0: enable or disable zooming (default enabled)
var enableDrag = 0; // 1 or 0: enable or disable dragging (default disabled)
var zoomScale = 0.2; // Zoom sensitivity

/// <====
/// END OF CONFIGURATION 

var root = document.documentElement;
var state = 'none', svgRoot = null, stateTarget, stateOrigin, stateTf;

setupHandlers(root);

/**
 * Register handlers
 */
function setupHandlers(root){
	setAttributes(root, {
		"onmouseup" : "handleMouseUp(evt)",
		"onmousedown" : "handleMouseDown(evt)",
		"onmousemove" : "handleMouseMove(evt)",
		//"onmouseout" : "handleMouseUp(evt)", // Decomment this to stop the pan functionality when dragging out of the SVG element
	});

	if(navigator.userAgent.toLowerCase().indexOf('webkit') >= 0)
		window.addEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari
	else
		window.addEventListener('DOMMouseScroll', handleMouseWheel, false); // Others
}

/**
 * Retrieves the root element for SVG manipulation. The element is then cached into the svgRoot global variable.
 */
function getRoot(root) {
	if(svgRoot == null) {
		var r = root.getElementById("viewport") ? root.getElementById("viewport") : root.documentElement, t = r;

		while(t != root) {
			if(t.getAttribute("viewBox")) {
				setCTM(r, t.getCTM());

				t.removeAttribute("viewBox");
			}

			t = t.parentNode;
		}

		svgRoot = r;
	}

	return svgRoot;
}

/**
 * Instance an SVGPoint object with given event coordinates.
 */
function getEventPoint(evt) {
	var p = root.createSVGPoint();

	p.x = evt.clientX;
	p.y = evt.clientY;

	return p;
}

/**
 * Sets the current transform matrix of an element.
 */
function setCTM(element, matrix) {
	var s = "matrix(" + matrix.a + "," + matrix.b + "," + matrix.c + "," + matrix.d + "," + matrix.e + "," + matrix.f + ")";

	element.setAttribute("transform", s);
}

/**
 * Dumps a matrix to a string (useful for debug).
 */
function dumpMatrix(matrix) {
	var s = "[ " + matrix.a + ", " + matrix.c + ", " + matrix.e + "\n  " + matrix.b + ", " + matrix.d + ", " + matrix.f + "\n  0, 0, 1 ]";

	return s;
}

/**
 * Sets attributes of an element.
 */
function setAttributes(element, attributes){
	for (var i in attributes)
		element.setAttributeNS(null, i, attributes[i]);
}

/**
 * Handle mouse wheel event.
 */
function handleMouseWheel(evt) {
	if(!enableZoom)
		return;

	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var delta;

	if(evt.wheelDelta)
		delta = evt.wheelDelta / 360; // Chrome/Safari
	else
		delta = evt.detail / -9; // Mozilla

	var z = Math.pow(1 + zoomScale, delta);

	var g = getRoot(svgDoc);
	
	var p = getEventPoint(evt);

	p = p.matrixTransform(g.getCTM().inverse());

	// Compute new scale matrix in current mouse position
	var k = root.createSVGMatrix().translate(p.x, p.y).scale(z).translate(-p.x, -p.y);

	setCTM(g, g.getCTM().multiply(k));

	if(typeof(stateTf) == "undefined")
		stateTf = g.getCTM().inverse();

	stateTf = stateTf.multiply(k.inverse());
}

/**
 * Handle mouse move event.
 */
function handleMouseMove(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(state == 'pan' && enablePan) {
		// Pan mode
		var p = getEventPoint(evt).matrixTransform(stateTf);

		setCTM(g, stateTf.inverse().translate(p.x - stateOrigin.x, p.y - stateOrigin.y));
	} else if(state == 'drag' && enableDrag) {
		// Drag mode
		var p = getEventPoint(evt).matrixTransform(g.getCTM().inverse());

		setCTM(stateTarget, root.createSVGMatrix().translate(p.x - stateOrigin.x, p.y - stateOrigin.y).multiply(g.getCTM().inverse()).multiply(stateTarget.getCTM()));

		stateOrigin = p;
	}
}

/**
 * Handle click event.
 */
function handleMouseDown(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	var g = getRoot(svgDoc);

	if(
		evt.target.tagName == "svg" 
		|| !enableDrag // Pan anyway when drag is disabled and the user clicked on an element 
	) {
		// Pan mode
		state = 'pan';

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	} else {
		// Drag mode
		state = 'drag';

		stateTarget = evt.target;

		stateTf = g.getCTM().inverse();

		stateOrigin = getEventPoint(evt).matrixTransform(stateTf);
	}
}

/**
 * Handle mouse button release event.
 */
function handleMouseUp(evt) {
	if(evt.preventDefault)
		evt.preventDefault();

	evt.returnValue = false;

	var svgDoc = evt.target.ownerDocument;

	if(state == 'pan' || state == 'drag') {
		// Quit pan mode
		state = '';
	}
}
]]></script><g id="viewport" transform="scale(0.5,0.5) translate(0,0)"><g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 489)">
<title>blockchain&#45;back</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-489 574.75,-489 574.75,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_L</title>
<polygon fill="none" stroke="black" points="8,-321.5 8,-477 436,-477 436,-321.5 8,-321.5"/>
</g>
<!-- File: blockchain&#45;back -->
<g id="node1" class="node">
<title>File: blockchain&#45;back</title>
<g id="a_node1"><a xlink:title="blockchain&#45;back">
<polygon fill="#f8f8f8" stroke="black" points="428,-469 16,-469 16,-329.5 428,-329.5 428,-469"/>
<text text-anchor="start" x="24" y="-449.8" font-family="Times,serif" font-size="16.00">File: blockchain&#45;back</text>
<text text-anchor="start" x="24" y="-431.05" font-family="Times,serif" font-size="16.00">Type: alloc_space</text>
<text text-anchor="start" x="24" y="-412.3" font-family="Times,serif" font-size="16.00">Time: Jan 10, 2025 at 11:46am (JST)</text>
<text text-anchor="start" x="24" y="-393.55" font-family="Times,serif" font-size="16.00">Showing nodes accounting for 1.63TB, 100% of 1.63TB total</text>
<text text-anchor="start" x="24" y="-374.8" font-family="Times,serif" font-size="16.00">Dropped 125 nodes (cum &lt;= 0.01TB)</text>
<text text-anchor="start" x="24" y="-337.05" font-family="Times,serif" font-size="16.00">See https://git.io/JfYMW for how to read the graph</text>
</a>
</g>
</g>
<!-- N1 -->
<g id="node1" class="node">
<title>N1</title>
<g id="a_node1"><a xlink:title="bytes.Join (1.63TB)">
<polygon fill="#edd5d5" stroke="#b20000" points="570.75,-177.5 403.25,-177.5 403.25,-88.5 570.75,-88.5 570.75,-177.5"/>
<text text-anchor="middle" x="487" y="-150.7" font-family="Times,serif" font-size="24.00">bytes</text>
<text text-anchor="middle" x="487" y="-123.7" font-family="Times,serif" font-size="24.00">Join</text>
<text text-anchor="middle" x="487" y="-96.7" font-family="Times,serif" font-size="24.00">1.63TB (100%)</text>
</a>
</g>
</g>
<!-- NN1_0 -->
<g id="NN1_0" class="node">
<title>NN1_0</title>
<g id="a_NN1_0"><a xlink:title="1.63TB">
<polygon fill="#f8f8f8" stroke="black" points="514,-36 464,-36 460,-32 460,0 510,0 514,-4 514,-36"/>
<polyline fill="none" stroke="black" points="510,-32 460,-32"/>
<polyline fill="none" stroke="black" points="510,-32 510,0"/>
<polyline fill="none" stroke="black" points="510,-32 514,-36"/>
<text text-anchor="middle" x="487" y="-15.28" font-family="Times,serif" font-size="8.00">13.45MB</text>
</a>
</g>
</g>
<!-- N1&#45;&gt;NN1_0 -->
<g id="edge1" class="edge">
<title>N1&#45;&gt;NN1_0</title>
<g id="a_edge1"><a xlink:title="1.63TB">
<path fill="none" stroke="black" d="M487,-88.31C487,-74.71 487,-60.06 487,-47.75"/>
<polygon fill="black" stroke="black" points="490.5,-47.86 487,-37.86 483.5,-47.86 490.5,-47.86"/>
</a>
</g>
<g id="a_edge1&#45;label"><a xlink:title="1.63TB">
<text text-anchor="middle" x="509.5" y="-57.2" font-family="Times,serif" font-size="14.00"> 1.63TB</text>
</a>
</g>
</g>
<!-- N2 -->
<g id="node2" class="node">
<title>N2</title>
<g id="a_node2"><a xlink:title="blockchain&#45;back/blockchain.(*ProofOfWork).Sha256Run.func1 (1.63TB)">
<polygon fill="#edd5d5" stroke="#b20000" points="527.62,-427.62 446.38,-427.62 446.38,-370.88 527.62,-370.88 527.62,-427.62"/>
<text text-anchor="middle" x="487" y="-416.02" font-family="Times,serif" font-size="8.00">blockchain</text>
<text text-anchor="middle" x="487" y="-406.27" font-family="Times,serif" font-size="8.00">(*ProofOfWork)</text>
<text text-anchor="middle" x="487" y="-396.52" font-family="Times,serif" font-size="8.00">Sha256Run</text>
<text text-anchor="middle" x="487" y="-386.77" font-family="Times,serif" font-size="8.00">func1</text>
<text text-anchor="middle" x="487" y="-377.02" font-family="Times,serif" font-size="8.00">0 of 1.63TB (100%)</text>
</a>
</g>
</g>
<!-- N3 -->
<g id="node3" class="node">
<title>N3</title>
<g id="a_node3"><a xlink:title="blockchain&#45;back/blockchain.(*ProofOfWork).InitData (1.63TB)">
<polygon fill="#edd5d5" stroke="#b20000" points="527.62,-277 446.38,-277 446.38,-230 527.62,-230 527.62,-277"/>
<text text-anchor="middle" x="487" y="-265.4" font-family="Times,serif" font-size="8.00">blockchain</text>
<text text-anchor="middle" x="487" y="-255.65" font-family="Times,serif" font-size="8.00">(*ProofOfWork)</text>
<text text-anchor="middle" x="487" y="-245.9" font-family="Times,serif" font-size="8.00">InitData</text>
<text text-anchor="middle" x="487" y="-236.15" font-family="Times,serif" font-size="8.00">0 of 1.63TB (100%)</text>
</a>
</g>
</g>
<!-- N2&#45;&gt;N3 -->
<g id="edge2" class="edge">
<title>N2&#45;&gt;N3</title>
<g id="a_edge2"><a xlink:title="blockchain&#45;back/blockchain.(*ProofOfWork).Sha256Run.func1 &#45;&gt; blockchain&#45;back/blockchain.(*ProofOfWork).InitData (1.63TB)">
<path fill="none" stroke="#b20000" stroke-width="5" d="M487,-370.53C487,-348.63 487,-317.8 487,-293.42"/>
<polygon fill="#b20000" stroke="#b20000" stroke-width="5" points="491.38,-293.63 487,-283.63 482.63,-293.63 491.38,-293.63"/>
</a>
</g>
<g id="a_edge2&#45;label"><a xlink:title="blockchain&#45;back/blockchain.(*ProofOfWork).Sha256Run.func1 &#45;&gt; blockchain&#45;back/blockchain.(*ProofOfWork).InitData (1.63TB)">
<text text-anchor="middle" x="509.5" y="-298.2" font-family="Times,serif" font-size="14.00"> 1.63TB</text>
</a>
</g>
</g>
<!-- N3&#45;&gt;N1 -->
<g id="edge3" class="edge">
<title>N3&#45;&gt;N1</title>
<g id="a_edge3"><a xlink:title="blockchain&#45;back/blockchain.(*ProofOfWork).InitData &#45;&gt; bytes.Join (1.63TB)">
<path fill="none" stroke="#b20000" stroke-width="5" d="M487,-229.65C487,-219.34 487,-206.63 487,-193.88"/>
<polygon fill="#b20000" stroke="#b20000" stroke-width="5" points="491.38,-194.13 487,-184.13 482.63,-194.13 491.38,-194.13"/>
</a>
</g>
<g id="a_edge3&#45;label"><a xlink:title="blockchain&#45;back/blockchain.(*ProofOfWork).InitData &#45;&gt; bytes.Join (1.63TB)">
<text text-anchor="middle" x="509.5" y="-198.7" font-family="Times,serif" font-size="14.00"> 1.63TB</text>
</a>
</g>
</g>
</g>
</g></svg>
